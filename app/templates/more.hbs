<!--
   - Copyright(c) 2016 Xuanrui Qi
   - This Source Code Form is subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this
   - file, You can obtain one at http://mozilla.org/MPL/2.0/.
-->

<h2>Professional Profile</h2><br>

<h4>Education</h4>
<p>
    <b><a href="https://engineering.tufts.edu/">Tufts University (School of Engineering)</a></b><br>
    I am studying for a <i>Bachelor of Science in Computer Science</i> and
    will graduate in the spring of 2018. Meanwhile, I am working with some
    fantastic professors at the Department of Computer Science.
</p><br>

<h4>Professional Interests</h4>
<p>
    My interests are mostly in programming languages. To be more specific, I
    am interested in programming language design and implementation (especially
    in interpreted languages, the design of their virtual machines, garbage collection, and
    just-in-time compilation), type theory, effects, mathematical
    logic, concurrent programming systems, and the application of formal
    methods to natural languages.
</p><br>

<h4>Programming Languages</h4>
<p>
    Because I work with programming languages, I use a lot of programming
    languages. I program in <b><a href="https://www.ocaml.org">OCaml</a></b>, <b>Standard ML</b>, <b>C</b>,
    <b>C++</b>, <b><a href="https://www.python.org">Python</a></b>,
    <b><a href="http://www.java.com">Java</a></b>,
    <b>Scheme</b> (MIT Scheme and <a href="https://racket-lang.org/">Racket</a>),
    <b><a href="http://www.erlang.org">Erlang</a></b>, <b>ECMAScript</b> (better known as JavaScript),
    <b><a href="https://www.haskell.org" title="Yes, a monad is just a monoid in the category of endofunctors">Haskell</a></b>,
    and <b><a href="http://www.ruby-lang.org">Ruby</a></b>. Currently, I'm also trying to 
    learn <a href="https://www.scala-lang.org/">Scala</a>, Prolog, and 
    <a href="https://www.idris-lang.org/" title="I learned Idris with its author, Edwin Brady, at OPLSS 2017">Idris</a>. Among all of them, my favorite 
    functional language and favorite language overall is OCaml, and my favorite object-oriented 
    language is Ruby (which I see as a modern Smalltalk). Recently, I have been working with 
    Racket extensively as well.
</p><br>

<h4>Courses</h4>
<p>
    Courses that excited me include:
    <ul>
        <li>
            COMP 105: Programming Languages<br>
            Comp 105 was a rather notorious course at Tufts, but thanks to great professors
            I enjoyed the course a lot. We covered a lot of topics in programming language
            theory, design, implementation and pragmatics all within one semester: functional
            programming, continuations, operational semantics (and reasoning about them),
            type theory, Hindley-Milner type inference, object orientation, lambda calculus,
            and modularity. My favorite course assignment was implementing type inference
            with Algorithm W for a statically typed language with a syntax similar to Scheme.
        </li>
        <li>
            COMP 40: Machine Structure and Assembly-Language Programming<br>
            Comp 40 was an even more notorious course at Tufts. A course on systems programming
            and programming more generally, we were given lots of difficult programming problems
            that required us to write low-level, modular, efficient and correct code. Some of the
            course projects are listed on the projects page!
        </li>
        <li>
            COMP 50CP: Concurrent Programming<br>
            COMP 50 was a course on, well, concurrency. Besides using threads, we also learned to
            program concurrently with the actor model. In the course, I solved a bunch of puzzles, 
            built a working chat server, and made a file backup system with two 
            classmates as the final project.
        </li>
    </ul>
</p>
